/**
 * 算法导论上的一道经典题目，排课问题
 * 有n个活动在同一天使用同一个教室的活动a1,a2,a3.....教室同一时刻只能有一个活动使用，每个活动都有开始时间结束时间，怎么安排使得开展活动最多
 */
public class ActiveTime {
        public static void main(String[] args) {
                //创建活动并装入集合中
                Active act1 = new Active(1,4);
                Active act2 = new Active(3,5);
                Active act3 = new Active(0,6);
                Active act4 = new Active(5,7);
                Active act5 = new Active(3,8);
                Active act6 = new Active(5,9);
                Active act7 = new Active(6,10);
                Active act8 = new Active(8,11);
                Active act9 = new Active(8,12);
                Active act10 = new Active(2,13);
                Active act11 = new Active(12,14);
                List<Active> actives = new ArrayList<Active>();
                actives.add(act1);
                actives.add(act2);
                actives.add(act3);
                actives.add(act4);
                actives.add(act5);
                actives.add(act6);
                actives.add(act7);
                actives.add(act8);
                actives.add(act9);
                actives.add(act10);
                actives.add(act11);
                List<Active> bestActives = getBestActives(actives, 0 , 16);
                for(int i = 0; i < bestActives.size(); i++) {
                        System.out.println(bestActives.get(i));
                }
        }
        
        /**
         * @param actives
         *              活动集合
         * @param startTime
         *              教室的开始使用时间
         * @param endTime
         *              教室的结束时间
         * @return
         */
         public static List<Active> getBestActives(List<Active> actives, int startTime, int endTime) {
                //最佳活动集合
                List<Active> bestActives = new ArrayList<Active>();
                //将活动按照最早结束时间来排，自己重写sort方法
                actives.sort(null);
                //用nowTime来记录上次活动结束时间
                int nowTime = startTime;
                for(int i = 0; i < actives.size(); i++) {
                        Active act = active(i);
                        if(act.getStartTime() >= nowTime && act.getEndTime() <= endTime) {
                                bestActives.add(act);
                                nowTime = act.getEndTime();
                        }
                }
                return bestActives;
         }
         
         public int compareTo(Active o) {
                if(this.endTime > o.getEndTime()) {
                        return 1;
                }else if(this.endTime == o.endTime) {
                        return 0;
                }else {
                        return -1;
                }
         }
}


/**
 * 假设有1,2,5,10,20,50,100几种面值的纸币分别有c0,c1,c2,c3,c4,c5,c6张，现在要用这些钱来支付k元，至少用多少纸币
 */
